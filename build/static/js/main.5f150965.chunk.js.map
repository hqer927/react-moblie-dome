{"version":3,"sources":["AsyncComponent.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","J_newWork_source_h5_app_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","J_newWork_source_h5_app_web_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","J_newWork_source_h5_app_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","displayName","state","component","J_newWork_source_h5_app_web_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","J_newWork_source_h5_app_web_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","value","_componentDidMount","J_newWork_source_h5_app_web_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","J_newWork_source_h5_app_web_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","apply","arguments","C","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","Component","Boolean","window","location","hostname","match","Vaccine","Promise","all","__webpack_require__","e","then","bind","setRem","vw","document","documentElement","clientWidth","style","fontSize","concat","onresize","ReactDOM","render","react_default","react_router_dom","className","react_router","exact","path","to","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAEe,SAASA,EAAgBC,GA0BpC,OA1BqD,SAAAC,GAGjD,SAAAC,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAFVQ,YAAc,iBAIVP,EAAKQ,MAAQ,CACTC,UAAW,MAJCT,EAH6B,OAAAC,OAAAS,EAAA,EAAAT,CAAAH,EAAAD,GAAAI,OAAAU,EAAA,EAAAV,CAAAH,EAAA,EAAAc,IAAA,oBAAAC,MAAA,eAAAC,EAAAb,OAAAc,EAAA,EAAAd,CAAAe,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAX,EAAA,OAAAO,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAYR5B,IAZQ,OAAAwB,EAAAE,EAAAG,KAY5BhB,EAZ4BW,EAYrCM,QAERvB,KAAKwB,SAAS,CACVlB,cAfyC,wBAAAa,EAAAM,SAAAT,EAAAhB,SAAA,yBAAAW,EAAAe,MAAA1B,KAAA2B,YAAA,KAAAlB,IAAA,SAAAC,MAAA,WAoB7C,IAAMkB,EAAI5B,KAAKK,MAAMC,UAErB,OAAOsB,EAAIC,EAAAf,EAAAgB,cAACF,EAAM5B,KAAKJ,OAAY,SAtBUD,EAAA,CACxBoC,yKCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXAC,EAAU7C,YAAe,kBAAM8C,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,cAEpC,WACG,IAAMC,EAAS,WACX,IAAMC,EAAKC,SAASC,gBAAgBC,YACpCF,SAASC,gBAAgBE,MAAMC,SAA/B,GAAAC,OAA6CN,EAAK,IAAlD,OAEJD,IACAX,OAAOmB,SAAWR,EANrB,GASDS,IAASC,OACLC,EAAAzC,EAAAgB,cAAC0B,EAAA,EAAD,KACID,EAAAzC,EAAAgB,cAAA,OAAK2B,UAAU,YACXF,EAAAzC,EAAAgB,cAAC4B,EAAA,EAAD,KACIH,EAAAzC,EAAAgB,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIN,OAAQ,kBAAOC,EAAAzC,EAAAgB,cAAC4B,EAAA,EAAD,CAAUG,GAAG,gBAClDN,EAAAzC,EAAAgB,cAAC4B,EAAA,EAAD,CAAOE,KAAK,WAAWtD,UAAW+B,OAG/BS,SAASgB,eAAe,SDuGrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.5f150965.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default function asyncComponent (importComponent) {\r\n    class AsyncComponent extends Component {\r\n        displayName = 'AsyncComponent';\r\n        constructor (props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                component: null\r\n            };\r\n        }\r\n\r\n        async componentDidMount () {\r\n            const { default: component } = await importComponent();\r\n\r\n            this.setState({\r\n                component\r\n            });\r\n        }\r\n\r\n        render () {\r\n            const C = this.state.component;\r\n\r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n\r\n    return AsyncComponent;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './index.less';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter ,Route ,Switch ,Redirect} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport asyncComponent from './AsyncComponent';\r\n\r\nconst Vaccine = asyncComponent(() => import('./vaccine/index'));\r\n\r\n(function () {\r\n    const setRem = () => {\r\n        const vw = document.documentElement.clientWidth;\r\n        document.documentElement.style.fontSize = `${vw / 7.5}px`;\r\n    };\r\n    setRem();\r\n    window.onresize = setRem;\r\n}());\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <div className='app-page'>\r\n            <Switch>\r\n                <Route exact path='/' render={() => (<Redirect to='/vaccine'/>)}/>\r\n                <Route path='/vaccine' component={Vaccine}/>\r\n            </Switch>\r\n        </div>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}